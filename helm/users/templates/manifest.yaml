apiVersion: v1
kind: List
items:
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ .Values.namespace }}
  - apiVersion: v1
    kind: Service
    metadata:
      name: usersdb
      namespace: {{ .Values.namespace }}
    spec:
      clusterIP: None
      selector:
        app: usersdb-pod
      ports:
        - port: 5432
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: user-database-configmap
      namespace: {{ .Values.namespace }}
      labels:
        app: user-database-configmap
    data:
      init.sql: |
        CREATE TABLE IF NOT EXISTS public.user_item
        (
        id integer NOT NULL,
        "amount-of-posts" integer DEFAULT 0,
        user_name character varying(255) COLLATE pg_catalog."default",
        CONSTRAINT user_item_pkey PRIMARY KEY (id)
        )
        
        TABLESPACE pg_default;
        
        ALTER TABLE public.user_item
        OWNER to admin;

        CREATE SEQUENCE public.user_item_seq
        INCREMENT 50
        START 1
        MINVALUE 1
        MAXVALUE 9223372036854775807
        CACHE 1;
      
        ALTER SEQUENCE public.user_item_seq
        OWNER TO admin;
  - apiVersion: v1
    kind: Secret
    metadata:
      name: users-db-secret
      namespace: {{ .Values.namespace }}
      labels:
        app: usersdb-pod
    data:
      POSTGRES_DB: dXNlcnM=
      POSTGRES_USER: YWRtaW4=
      POSTGRES_PASSWORD: YWRtaW4xMjM0
      PGPASSWORD: YWRtaW4xMjM0
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: usersdb-pod
      namespace: {{ .Values.namespace }}
    spec:
      serviceName: usersdb-pod
      selector:
        matchLabels:
          app: usersdb-pod
      replicas: {{ .Values.replicaCountDb }}
      template:
        metadata:
          labels:
            app: usersdb-pod
        spec:
# it's needed when PVC defined and then volumeClaimTemplates not needed.
#          volumes:
#            - name: pvc-users-storage
#              persistentVolumeClaim:
#                claimName: pvc-usersdb
          containers:
            - name: usersdb-pod
              image: postgres:14.7
              ports:
              - containerPort: 5432
              envFrom:
                - configMapRef:
                      name: user-database-configmap
                - secretRef:
                    name: users-db-secret
              volumeMounts:
                - mountPath: "/var/lib/postgresql/data"
                  name: pvc-users-storage
              startupProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - pg_isready -h localhost -U admin
                failureThreshold: 30
                periodSeconds: 10
              readinessProbe:
                tcpSocket:
                  port: 5432
                initialDelaySeconds: 10
                periodSeconds: 5
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - pg_isready -h localhost -U admin
                initialDelaySeconds: 15
                periodSeconds: 10
# it's needed when there is no PVC defined.
      volumeClaimTemplates:
        - metadata:
            name: pvc-users-storage
          spec:
            storageClassName: hostpath
            resources:
              requests:
                storage: 3Gi
            accessModes:
              - ReadWriteOnce
  - apiVersion: v1
    kind: Service
    metadata:
      name: usersapp
      namespace: {{ .Values.namespace }}
    spec:
      type: NodePort
      selector:
        app: usersapp-pod
      ports:
        - protocol: "TCP"
          port: 8081
          targetPort: 8081
          nodePort: 32315
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: users-app-configmap
      namespace: {{ .Values.namespace }}
      labels:
        app: usersapp-pod
    data:
      DB_URL: "jdbc:postgresql://usersdb:5432/users"
      DB_USERNAME: "admin"
      DB_PASSWORD: "admin1234"
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: usersapp-pod
      namespace: {{ .Values.namespace }}
    spec:
      selector:
        matchLabels:
          app: usersapp-pod
      replicas: {{ .Values.replicaCountApp }}
      template:
        metadata:
          labels:
            app: usersapp-pod
            owner: igorpavlyushchik
        spec:
          containers:
            - name: usersapp-container
              image: igorpavlyushchik/users-application:1.0.0
              ports:
                - containerPort: 8081
              envFrom:
                - configMapRef:
                    name: users-app-configmap
              startupProbe:
                httpGet:
                  path: /actuator/health
                  port: 8081
                initialDelaySeconds: 15
                failureThreshold: 3
                periodSeconds: 15
              livenessProbe:
                httpGet:
                  path: /actuator/health/liveness
                  port: 8081
                failureThreshold: 2
                periodSeconds: 3
                successThreshold: 1
              readinessProbe:
                httpGet:
                  path: /actuator/health/readiness
                  port: 8081
                initialDelaySeconds: 15
                failureThreshold: 2
                periodSeconds: 3
                successThreshold: 1